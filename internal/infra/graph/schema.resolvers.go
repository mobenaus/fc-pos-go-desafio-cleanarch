package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/mobenaus/fc-pos-go-desafio-cleancode/internal/infra/graph/model"
	"github.com/mobenaus/fc-pos-go-desafio-cleancode/internal/usecase"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input *model.OrderInput) (*model.Order, error) {
	dto := usecase.OrderInputDTO{
		ID:    input.ID,
		Price: float64(input.Price),
		Tax:   float64(input.Tax),
	}
	output, err := r.CreateOrderUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}
	return &model.Order{
		ID:         output.ID,
		Price:      float64(output.Price),
		Tax:        float64(output.Tax),
		FinalPrice: float64(output.FinalPrice),
	}, nil
}

// ListOrders is the resolver for the listOrders field.
func (r *mutationResolver) ListOrders(ctx context.Context, input *model.ListOrdersInput) (*model.OrderList, error) {
	dto := usecase.OrderListInputDTO{
		Page:  input.Page,
		Limit: input.Limit,
	}
	output, err := r.ListOrdersUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}
	var orders = []*model.Order{}
	for _, o := range output {
		orders = append(orders, &model.Order{
			ID:         o.ID,
			Price:      o.Price,
			Tax:        o.Tax,
			FinalPrice: o.FinalPrice,
		})
	}
	return &model.OrderList{
		Orders: orders,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
